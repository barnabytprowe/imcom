!
! Acts as a shared-data / COMMON block for the imcom package
!
!-----------------------------------------------------------------------

MODULE imcom_data

implicit none
save

! Config variables:
! i)  number of exposures we are combining
integer :: nexp

! ii) galaxy image & PSF image filenames
character(LEN=256), dimension(:), allocatable :: gimfile, psffile

! iii) dither position (coordinates of lower left corner pixel centre in each exposure) & coordinates of lower-left pixel in output image
real(KIND=8), dimension(:), allocatable :: noise
real(KIND=8), dimension(:, :), allocatable :: dither
real(KIND=8) :: outpos1, outpos2

! iv) target PSF ("Gamma") filename
character(LEN=256) :: gamfile
character(LEN=256) :: outfile
real(KIND=8) :: gimscale, psfscale
real(KIND=8) :: maxfreq
real(KIND=8) :: gamscale, outscale ! input/desired image pixel units
real(KIND=8) :: kappa              ! How do we set Kappa?

! Sizes of PSF, galaxy, Gamma images
integer :: n1psf, n2psf
integer :: n1gim, n2gim
integer :: n1gam, n2gam
integer :: n1out, n2out

integer :: n, m  ! Dimensions specifiers for A, B, T, U matrices

! Default A, B and T storage filenames
character(LEN=256), parameter :: Adeffile = "A.fits"
character(LEN=256), parameter :: Bdeffile = "B.fits"
character(LEN=256), parameter :: Tdeffile = "T.fits"
character(LEN=256), parameter :: Udeffile = "U.fits"
character(LEN=256), parameter :: Sdeffile = "S.fits"

! A, B and T storage filenames
character(LEN=256) :: Afile
character(LEN=256) :: Bfile
character(LEN=256) :: Tfile
character(LEN=256) :: Ufile
character(LEN=256) :: Sfile

! Real space inputs and outputs
real(KIND=8), dimension(:, :, :), allocatable :: Im
real(KIND=8), dimension(:, :), allocatable :: H
real(KIND=8), dimension(:, :), allocatable :: U
real(KIND=8), dimension(:, :), allocatable :: S

real(KIND=8), dimension(:), allocatable :: I_i
real(KIND=8), dimension(:, :, :), allocatable :: x
real(KIND=8), dimension(:, :, :), allocatable :: y
real(KIND=8), dimension(:), allocatable :: x_i
real(KIND=8), dimension(:), allocatable :: y_i

real(KIND=8), dimension(:), allocatable :: H_a
real(KIND=8), dimension(:, :), allocatable :: Xa
real(KIND=8), dimension(:, :), allocatable :: Ya
real(KIND=8), dimension(:), allocatable :: X_a
real(KIND=8), dimension(:), allocatable :: Y_a
real(KIND=8), dimension(:), allocatable :: U_a
real(KIND=8), dimension(:), allocatable :: kS_a

! Diagonal noise matrix (only diagonal noise implemented)
real(KIND=8), dimension(:), allocatable :: kN

! (PSFs)
real(KIND=8), dimension(:, :, :, :, :), allocatable :: G_i
real(KIND=8), dimension(:, :, :), allocatable :: G

! (Desired PSF)
real(KIND=8), dimension(:, :), allocatable :: Gamma

! Fourier space counterparts
complex(KIND=8), dimension(:, :, :), allocatable :: It_i
complex(KIND=8), dimension(:, :, :, :, :), allocatable :: Gt_i
complex(KIND=8), dimension(:, :, :), allocatable :: Gt
real(KIND=8), dimension(:, :), allocatable :: ux
real(KIND=8), dimension(:, :), allocatable :: uy
complex(KIND=8), dimension(:, :), allocatable :: Gammat
  
! Problem matrices
real(KIND=8), dimension(:, :), allocatable :: A_aij
real(KIND=8), dimension(:), allocatable :: A_pack
real(KIND=8), dimension(:), allocatable :: A_pequ
real(KIND=8), dimension(:), allocatable :: A_chls
real(KIND=8), dimension(:, :), allocatable :: B_ia
real(KIND=8) :: C_a
real(KIND=8), dimension(:, :), allocatable :: T_ia

! Work matrices
real(KIND=8), dimension(:), allocatable :: scaling

! Constants
real(KIND=8), parameter :: pi = 3.141592653589793


!  FFTW3 planning constants required by DFT calls (from fftw3.f in directory containing fftw3.h)
!
      INTEGER FFTW_R2HC
      PARAMETER (FFTW_R2HC=0)
      INTEGER FFTW_HC2R
      PARAMETER (FFTW_HC2R=1)
      INTEGER FFTW_DHT
      PARAMETER (FFTW_DHT=2)
      INTEGER FFTW_REDFT00
      PARAMETER (FFTW_REDFT00=3)
      INTEGER FFTW_REDFT01
      PARAMETER (FFTW_REDFT01=4)
      INTEGER FFTW_REDFT10
      PARAMETER (FFTW_REDFT10=5)
      INTEGER FFTW_REDFT11
      PARAMETER (FFTW_REDFT11=6)
      INTEGER FFTW_RODFT00
      PARAMETER (FFTW_RODFT00=7)
      INTEGER FFTW_RODFT01
      PARAMETER (FFTW_RODFT01=8)
      INTEGER FFTW_RODFT10
      PARAMETER (FFTW_RODFT10=9)
      INTEGER FFTW_RODFT11
      PARAMETER (FFTW_RODFT11=10)
      INTEGER FFTW_FORWARD
      PARAMETER (FFTW_FORWARD=-1)
      INTEGER FFTW_BACKWARD
      PARAMETER (FFTW_BACKWARD=+1)
      INTEGER FFTW_MEASURE
      PARAMETER (FFTW_MEASURE=0)
      INTEGER FFTW_DESTROY_INPUT
      PARAMETER (FFTW_DESTROY_INPUT=1)
      INTEGER FFTW_UNALIGNED
      PARAMETER (FFTW_UNALIGNED=2)
      INTEGER FFTW_CONSERVE_MEMORY
      PARAMETER (FFTW_CONSERVE_MEMORY=4)
      INTEGER FFTW_EXHAUSTIVE
      PARAMETER (FFTW_EXHAUSTIVE=8)
      INTEGER FFTW_PRESERVE_INPUT
      PARAMETER (FFTW_PRESERVE_INPUT=16)
      INTEGER FFTW_PATIENT
      PARAMETER (FFTW_PATIENT=32)
      INTEGER FFTW_ESTIMATE
      PARAMETER (FFTW_ESTIMATE=64)
      INTEGER FFTW_ESTIMATE_PATIENT
      PARAMETER (FFTW_ESTIMATE_PATIENT=128)
      INTEGER FFTW_BELIEVE_PCOST
      PARAMETER (FFTW_BELIEVE_PCOST=256)
      INTEGER FFTW_NO_DFT_R2HC
      PARAMETER (FFTW_NO_DFT_R2HC=512)
      INTEGER FFTW_NO_NONTHREADED
      PARAMETER (FFTW_NO_NONTHREADED=1024)
      INTEGER FFTW_NO_BUFFERING
      PARAMETER (FFTW_NO_BUFFERING=2048)
      INTEGER FFTW_NO_INDIRECT_OP
      PARAMETER (FFTW_NO_INDIRECT_OP=4096)
      INTEGER FFTW_ALLOW_LARGE_GENERIC
      PARAMETER (FFTW_ALLOW_LARGE_GENERIC=8192)
      INTEGER FFTW_NO_RANK_SPLITS
      PARAMETER (FFTW_NO_RANK_SPLITS=16384)
      INTEGER FFTW_NO_VRANK_SPLITS
      PARAMETER (FFTW_NO_VRANK_SPLITS=32768)
      INTEGER FFTW_NO_VRECURSE
      PARAMETER (FFTW_NO_VRECURSE=65536)
      INTEGER FFTW_NO_SIMD
      PARAMETER (FFTW_NO_SIMD=131072)
      INTEGER FFTW_NO_SLOW
      PARAMETER (FFTW_NO_SLOW=262144)
      INTEGER FFTW_NO_FIXED_RADIX_LARGE_N
      PARAMETER (FFTW_NO_FIXED_RADIX_LARGE_N=524288)
      INTEGER FFTW_ALLOW_PRUNING
      PARAMETER (FFTW_ALLOW_PRUNING=1048576)
      INTEGER FFTW_WISDOM_ONLY
      PARAMETER (FFTW_WISDOM_ONLY=2097152)


END MODULE imcom_data
