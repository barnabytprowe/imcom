#!/usr/local/bin/python2.7

import pyfits
import os
import uuid
from numpy import *
import shutil
import multiprocessing
#from scipy import interp2d
#from scipy.interpolate import interp2d

from optparse import OptionParser

imcomex = "/raid2/rhodes/projector/dailey/IMCOM/bin/imcom"

parser= OptionParser()
parser.add_option("-f","--basename",dest="basename",help="the base on which to build the input file names")
parser.add_option("-b","--begin",dest="begin",help="first file number")
parser.add_option("-e","--end",dest="end",help="last file number")
parser.add_option("-s","--stampsize",dest="windowsize",default=16,help="size of the cropped sections to work on")
parser.add_option("-p","--psf",dest="psffilename",help="filename for psf")
parser.add_option("-x","--gimxscale",dest="gimxscale",default=.4,help="xscale for the input images")
parser.add_option("-y","--gimyscale",dest="gimyscale",default=.4,help="yscale for the input images")
parser.add_option("--psfxscale",dest="psfxscale",default=.1,help="xscale for the psf image")
parser.add_option("--psfyscale",dest="psfyscale",default=.1,help="yscale for the psf image")
parser.add_option("--outxscale",dest="outxscale",default=.2,help="xscale for the output image")
parser.add_option("--outyscale",dest="outyscale",default=.2,help="yscale for the output image")
parser.add_option("-n","--noise",dest="noise",default=1.0,help="noise")
parser.add_option("-r","--rotationangle",dest="rotangdeg",default=0.0,help="Rotation angle in degrees")
parser.add_option("--savetemp",action="store_true",dest="keeptemp",default=False,help="save temporary files (for debugging)")
parser.add_option("--outputxsize",dest="outputxsize",default=32,help="size of the output image")
parser.add_option("--outputysize",dest="outputysize",default=32,help="size of the output image")
parser.add_option("--US",dest="US",default="S",help="specify imcom mode")
parser.add_option("--USmax",dest="max",default="1.d-3",help="max U or S")
parser.add_option("--UStol",dest="tol",default="1.d-6",help="tolerance on U or S")
parser.add_option("--tempbase",dest="tempdir",default="/scr/dailey/",help="parent directory of scratch dirs")

(options,args) = parser.parse_args()
tempid=str(uuid.uuid1())
temppath=options.tempdir+tempid+"/"
print "scratch directory for this run is "+temppath
os.mkdir(temppath)

filelist = []
spotfiles = []
for i in range(int(options.begin),int(options.end)+1):
 f = '%s%04d.fits' % (options.basename, i)
 s = '%s%04d_spots.fits' % (options.basename, i)
 spotfiles.append(s)
 filelist.append(f)

spotsfits = pyfits.open(spotfiles[0])

spotsfits.info()

spotsdata = spotsfits['LDAC_OBJECTS'].data

spots=[]
for i in spotsdata:
 if i[1] == 0:
  spots.append([])
 spots[i[0]].append(i)

spotsfits.close()

corners=[[0,0],[len(spots)-1,len(spots[-1])-1]]
#print spots[corners[1][0]][corners[1][1]]
#print corners

#print spots
#deal with empty rows/columns
if spots[corners[0][0]][corners[0][1]][7] <= 0:
 print "adjusting corner 1"
 corners[0][0]+=1
if spots[corners[0][0]][corners[0][1]][8] <= 0:
 print "adjusting corner 2"
 corners[0][1]+=1
if spots[corners[1][0]][corners[1][1]][7] <= 0:
 print "adjusting corner 3"
 corners[1][0]-=1
if spots[corners[1][0]][corners[1][1]][8] <= 0:
 print "adjusting corner 4"
 corners[1][1]-=1

#print corners

#verify the corners
#print spots[corners[0][0]][corners[0][1]]
#print spots[corners[0][0]][corners[1][1]]
#print spots[corners[1][0]][corners[1][0]]
#print spots[corners[1][0]][corners[1][1]]

pixcorners = [
              ['tr',floor(spots[corners[0][0]][corners[1][1]][7]),floor(spots[corners[0][0]][corners[1][1]][8]),spots[corners[0][0]][corners[1][1]][7],spots[corners[0][0]][corners[1][1]][8],corners[0][0],corners[1][1]],
              ['tl',floor(spots[corners[0][0]][corners[0][1]][7]),floor(spots[corners[0][0]][corners[0][1]][8]),spots[corners[0][0]][corners[0][1]][7],spots[corners[0][0]][corners[0][1]][8],corners[0][0],corners[0][1]],
              ['bl',floor(spots[corners[1][0]][corners[0][1]][7]),floor(spots[corners[1][0]][corners[0][1]][8]),spots[corners[1][0]][corners[0][1]][7],spots[corners[1][0]][corners[0][1]][8],corners[1][0],corners[0][1]],
              ['br',floor(spots[corners[1][0]][corners[1][1]][7]),floor(spots[corners[1][0]][corners[1][1]][8]),spots[corners[1][0]][corners[1][1]][7],spots[corners[1][0]][corners[1][1]][8],corners[1][0],corners[1][1]]
             ]
#print "pixcorners:"
#print pixcorners

zeropointx = spots[corners[0][0]][corners[0][1]][7]
zeropointy = spots[corners[0][0]][corners[0][1]][8]
xdithers = dict()
ydithers = dict()

for s in spotfiles:
 sf = pyfits.open(s)
 sd = sf['LDAC_OBJECTS'].data
 sspots=[]
 for i in sd:
  if i[1] == 0:
   sspots.append([])
  sspots[i[0]].append(i)
 filekey = s[:-11]+s[-5:]
 xdithers[filekey]=sspots[corners[0][0]][corners[0][1]][7]-zeropointx
 ydithers[filekey]=sspots[corners[0][0]][corners[0][1]][8]-zeropointy
 sf.close()

cropwindow = options.windowsize

images =[]
for f in filelist:
 img = pyfits.open(f)
 d = img['PRIMARY'].data
 d = d.astype('float64')
 images.append(d)
 imo = pyfits.open(f)
 print img.info()
 for c in pixcorners:
  b1,b2 = c[1]-cropwindow/2,c[2]-cropwindow/2
  e1,e2 = c[1]+cropwindow/2,c[2]+cropwindow/2
  im = img['PRIMARY'].data[b2:e2,b1:e1]
  im = im.astype(float64)
  print b1,e1,b2,e2
  imo['PRIMARY'].data=im
  outname = temppath+f[:-5]+'_'+c[0]+'_cropped.fits'
  print "cropping:  output file is "+outname
  if os.path.exists(outname) : os.remove(outname)
  imo.writeto(outname)
 img.close()
 imo.close()

#test work
#for f in filelist:
# for c in pixcorners:
#  test = pyfits.open(f[:-5]+'_'+c[0]+'_cropped.fits')
#  print test.info()

for c in pixcorners:
 fig = open(temppath+c[0]+"_main.config",'w')
 fig.write("PSFXSCALE   "+str(options.psfxscale)+"\n")
 fig.write("PSFYSCALE   "+str(options.psfyscale)+"\n")
 fig.write("NEXP        "+str(len(filelist))+"\n")
 fig.write("USERXY      0\n")
 inputcounter=1
 for f in filelist:
  fig.write("INCONFIG"+str(inputcounter)+"   "+temppath+"config_"+c[0]+"."+f[:-5]+"\n")
  inputcounter=inputcounter+1
  lfig = open(temppath+"config_"+c[0]+"."+f[:-5],"w")
  lfig.write("PSFFILE     "+str(options.psffilename)+"\n")
  lfig.write("GIMFILE     "+temppath+f[:-5]+"_"+c[0]+"_cropped.fits\n")
  lfig.write("ROTANGDEG   "+str(options.rotangdeg)+"\n")
  lfig.write("NOISE       "+str(options.noise)+"\n")
  lfig.write("GIMXSCALE   "+str(options.gimxscale)+"\n")
  lfig.write("GIMYSCALE   "+str(options.gimyscale)+"\n")
  lfig.write("DITHER      "+str(xdithers[f])+" "+str(ydithers[f])+"\n") 
  lfig.close()
 fig.write("OUTCONFIG   "+temppath+c[0]+"_output.config\n")
 fig.write("AFILE       "+temppath+"A_"+c[0]+".fits\n")
 fig.write("BFILE       "+temppath+"B_"+c[0]+".fits\n")
 fig.write("QFILE       "+temppath+"Q_"+c[0]+".fits\n")
 fig.write("LFILE       "+temppath+"L_"+c[0]+".fits\n")
 fig.write("PFILE       "+temppath+"P_"+c[0]+".fits\n")
 fig.close()
 ofig = open(temppath+c[0]+"_output.config",'w')
 ofig.write("GAMFILE     "+str(options.psffilename)+"\n")
 ofig.write("OUTFILE     "+temppath+"H_"+c[0]+".fits\n")
 ofig.write("KFILE       "+temppath+"K_"+c[0]+".fits\n")
 ofig.write("TFILE       "+temppath+"T_"+c[0]+".fits\n")
 ofig.write("SFILE       "+temppath+"S_"+c[0]+".fits\n")
 ofig.write("UFILE       "+temppath+"U_"+c[0]+".fits\n")
 ofig.write("OUTXSCALE   "+str(options.outxscale)+"\n")
 ofig.write("OUTYSCALE   "+str(options.outyscale)+"\n")
 ofig.write("OUTPOS      0.0000000 0.0000000\n")
 ofig.write("NOUT        "+str(options.outputxsize)+" "+str(options.outputysize)+"\n")
 ofig.close()


#BIG DEAL!!!  run imcom
for c in pixcorners:
 command = imcomex+" "+temppath+c[0]+"_main.config"+" "+str(options.US)+" "+str(options.max)+" "+str(options.tol)
 print command
 os.system(command)

for c in pixcorners:
 tmatfile = pyfits.open(temppath+"T_"+c[0]+".fits")
 tmatfile.info()
 c.append(tmatfile['PRIMARY'].data)

print pixcorners[0]
print len(pixcorners[0][-1])
print len(pixcorners[0][-1][0])

for c in pixcorners:
 print "copy "+temppath+"H_"+c[0]+".fits to H_"+str(c[5])+"_"+str(c[6])+".fits"
 shutil.copy(temppath+"H_"+c[0]+".fits","H_"+str(c[5])+"_"+str(c[6])+".fits")
 
def processijnocom(ij):
 i=ij[0]
 j=ij[1]
 #print "working on "+str(i)+" "+str(j)+" without imcom!"
 cornerdistsq = []
 for c in pixcorners:
  distsq = (spots[i][j][7]-c[3])**2+(spots[i][j][8]-c[4])**2
  cornerdistsq.append(distsq)
 if 0 in cornerdistsq:
  #we are at a corner, deal with it
  #print "we are at a corner and need to deal with this differently"
  print "we are at a corner and have dealt with this differently"
 else:
  if spots[i][j][7] == 0 or spots[i][j][8] == 0:
   print "WARNING: problem with spot "+str(i)+" "+str(j)+" aborting spot\n"
   return
  I=array([])
  for f in images:
   b1,b2 = floor(spots[i][j][7])-cropwindow/2,floor(spots[i][j][8])-cropwindow/2
   e1,e2 = floor(spots[i][j][7])+cropwindow/2,floor(spots[i][j][8])+cropwindow/2
  # print b1,b2,e1,e2
   im = f[b2:e2,b1:e1]
   I = concatenate((I,im.flatten('F')))
  sum = 0
  for k in range(0,len(cornerdistsq)):
   sum+=1/cornerdistsq[k]
  T=1/cornerdistsq[0]/sum*pixcorners[0][-1]
  for k in range(1,len(cornerdistsq)):
   T+=1/cornerdistsq[k]/sum*pixcorners[k][-1]
  #print shape(T)
  #print shape(I)
  H = tensordot(T,I,axes=1)
  H.reshape((options.outputxsize, options.outputysize), order='F')
  Himage = pyfits.open(temppath+"H_"+c[0]+".fits")
  Himage.data=H
  Himage.writeto("H_"+str(i)+"_"+str(j)+".fits", clobber=True)
  #hdu = pyfits.PrimaryHDU(H)
  #hdu.writeto("H_"+str(i)+"_"+str(j)+".fits", clobber=True)
  

def processij(ij):
 i=ij[0]
 j=ij[1]
 #print "working on "+str(i)+" "+str(j)+" in a function!"
 Tout = pyfits.open(temppath+"T_"+pixcorners[0][0]+".fits")
 Tdata= Tout['PRIMARY'].data
 Tdata[:][:]=0
 cornerdistsq = []
 for c in pixcorners:
  distsq = (spots[i][j][7]-c[3])**2+(spots[i][j][8]-c[4])**2
  cornerdistsq.append(distsq)
 if 0 in cornerdistsq:
  #we are at a corner, deal with it
  #print "we are at a corner and need to deal with this differently"
  print "we are at a corner and have dealt with this differently"
 else:
  #crop the file
  print "cropping"
  for f in filelist:
   img = pyfits.open(f)
   imo = pyfits.open(f)
   #print img.info()
   b1,b2 = floor(spots[i][j][7])-cropwindow/2,floor(spots[i][j][8])-cropwindow/2
   e1,e2 = floor(spots[i][j][7])+cropwindow/2,floor(spots[i][j][8])+cropwindow/2
   im = img['PRIMARY'].data[b2:e2,b1:e1]
   im = im.astype(float64)
   #print b1,e1,b2,e2
   imo['PRIMARY'].data=im
   outname = temppath+f[:-5]+"_"+str(i)+"_"+str(j)+"_cropped.fits"
   print "cropping:  output file is "+outname
   if os.path.exists(outname) : os.remove(outname)
   imo.writeto(outname)
   img.close()
   imo.close()
  print "interpolating"
  sum = 0
  for k in range(0,len(cornerdistsq)):
   sum+=1/cornerdistsq[k]
  for k in range(0,len(cornerdistsq)):
 #  for e in range(0,len(Tdata)):
 #   for f in range(0,len(Tdata[e])):
 #    Tdata[e][f]+=1/cornerdistsq[k]/sum*pixcorners[k][-1][e][f]
   Tdata+=1/cornerdistsq[k]/sum*pixcorners[k][-1]
  Tout.data = Tdata
  #print "starting to write"
  Tout.writeto(temppath+"T_"+str(i)+"_"+str(j)+".fits")
  #set up imcom
  fig = open(temppath+str(i)+"_"+str(j)+"_main.config",'w')
  fig.write("PSFXSCALE   "+str(options.psfxscale)+"\n")
  fig.write("PSFYSCALE   "+str(options.psfyscale)+"\n")
  fig.write("NEXP        "+str(len(filelist))+"\n")
  fig.write("USERXY      0\n")
  inputcounter=1
  for f in filelist:
   fig.write("INCONFIG"+str(inputcounter)+"   "+temppath+"config_"+str(i)+"_"+str(j)+"."+f[:-5]+"\n")
   inputcounter=inputcounter+1
   lfig = open(temppath+"config_"+str(i)+"_"+str(j)+"."+f[:-5],"w")
   lfig.write("PSFFILE     "+str(options.psffilename)+"\n")
   lfig.write("GIMFILE     "+temppath+f[:-5]+"_"+str(i)+"_"+str(j)+"_cropped.fits\n")
   lfig.write("ROTANGDEG   "+str(options.rotangdeg)+"\n")
   lfig.write("NOISE       "+str(options.noise)+"\n")
   lfig.write("GIMXSCALE   "+str(options.gimxscale)+"\n")
   lfig.write("GIMYSCALE   "+str(options.gimyscale)+"\n")
   lfig.write("DITHER      "+str(xdithers[f])+" "+str(ydithers[f])+"\n")
   lfig.close()
  fig.write("OUTCONFIG   "+temppath+str(i)+"_"+str(j)+"_output.config\n")
  fig.write("AFILE       "+temppath+"A_"+str(i)+"_"+str(j)+".fits\n")
  fig.write("BFILE       "+temppath+"B_"+str(i)+"_"+str(j)+".fits\n")
  fig.write("QFILE       "+temppath+"Q_"+str(i)+"_"+str(j)+".fits\n")
  fig.write("LFILE       "+temppath+"L_"+str(i)+"_"+str(j)+".fits\n")
  fig.write("PFILE       "+temppath+"P_"+str(i)+"_"+str(j)+".fits\n")
  fig.close()
  ofig = open(temppath+str(i)+"_"+str(j)+"_output.config",'w')
  ofig.write("GAMFILE     "+str(options.psffilename)+"\n")
  ofig.write("OUTFILE     H_"+str(i)+"_"+str(j)+".fits\n")
  ofig.write("KFILE       "+temppath+"K_"+str(i)+"_"+str(j)+".fits\n")
  ofig.write("TFILE       "+temppath+"T_"+str(i)+"_"+str(j)+".fits\n")
  ofig.write("SFILE       "+temppath+"S_"+str(i)+"_"+str(j)+".fits\n")
  ofig.write("UFILE       "+temppath+"U_"+str(i)+"_"+str(j)+".fits\n")
  ofig.write("OUTXSCALE   "+str(options.outxscale)+"\n")
  ofig.write("OUTYSCALE   "+str(options.outyscale)+"\n")
  ofig.write("OUTPOS      0.0000000 0.0000000\n")
  ofig.write("NOUT        "+str(options.outputxsize)+" "+str(options.outputysize)+"\n")
  ofig.close()
  command = imcomex+" "+temppath+str(i)+"_"+str(j)+"_main.config"+" "+str(options.US)+" "+str(options.max)+" "+str(options.tol)
  print command
  os.system(command)
  if not options.keeptemp:
   if os.path.exists(temppath+"T_"+str(i)+"_"+str(j)+".fits"): os.remove(temppath+"T_"+str(i)+"_"+str(j)+".fits")


#pool=multiprocessing.Pool(processes=multiprocessing.cpu_count())
pool=multiprocessing.Pool(processes=2)
jobs=[]
#arg1=[]
#arg2=[]
for i in range(corners[0][0],corners[1][0]):
 for j in range(corners[0][1],corners[1][1]):  #might want to swap the i and j here if it comes out backwards
  #processij([i,j])
 # processijnocom([i,j])
  jobs.append([i,j])

#print "jobs:"
#print len(jobs)
#pool.map(processij,jobs)
pool.map(processijnocom,jobs)

#Tout = pyfits.open(temppath+"T_"+pixcorners[0][0]+".fits")
#Tdata= Tout['PRIMARY'].data
#functions=[]
#xx=[]
#yy=[]
#zz=[]
#for c in pixcorners:
# xx.append(c[3])
# yy.append(c[4])
# zz.append(0)
#
#print "getting the functions"
#x=array(xx)
#y=array(yy)
#z=array(zz)
#for i in range(0,len(Tdata)):
# functions.append([])
# for j in range(0,len(Tdata[i])):
#  for k in range(0,len(pixcorners)):
#   z[k]=pixcorners[k][-1][i][j]
#  functions[i].append(interp2d(x,y,z,'linear'))
#print "got the functions"


if not options.keeptemp:
 print "removing "+temppath
 if os.path.exists(temppath+"*"): os.remove(temppath+"*")
 #os.remove(temppath+"*") if os.path.exists(temppath+"*")
 os.rmdir(temppath)


